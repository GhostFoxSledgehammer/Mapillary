image: registry.gitlab.com/josm/docker-library/openjdk-8-josmplugin:latest

variables:
  GIT_SUBMODULE_STRATEGY: recursive

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

#############################
# Various additional Checks #
#############################
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: License-Scanning.gitlab-ci.yml

stages:
  - build
  - test
  - deploy
  - release

###############
# Build stage #
###############

assemble:
  stage: build
  script:
    - ./gradlew assemble --stacktrace
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  interruptible: true

assemble with java 11:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-11-josmplugin:latest
  script:
    - ./gradlew assemble --stacktrace
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  interruptible: true

assemble with java 15:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-15-josmplugin:latest
  script:
    - ./gradlew assemble --stacktrace
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  allow_failure: true
  interruptible: true

code_navigation:
  stage: build
  script:
    - apk add --update curl bash
    - curl -fLo coursier https://git.io/coursier-cli
    - chmod +x coursier
    - ./coursier launch com.sourcegraph:lsif-java_2.13:0.4.0 -- index --build-tool gradle
  artifacts:
    reports:
      lsif: dump.lsif
  interruptible: true

##############
# Test stage #
##############

build:
  stage: test
  script:
    - ./gradlew build --stacktrace
  artifacts:
    paths:
    - build
  needs: ["assemble"]

test:
  stage: test
  script:
  - ./gradlew check --stacktrace --continue #--info
  - ./gradlew jacocoTestReport
  - ./gradlew jacocoTestCoverageVerification
  artifacts:
    paths:
    - build
    reports:
      junit: build/test-results/**/TEST-*.xml
  needs: ["assemble"]
  dependencies:
    - assemble
  interruptible: true

coverage:
  stage: deploy
  needs: ["test"]
  dependencies:
    - test
  image: haynes/jacoco2cobertura:1.0.3
  script:
    - 'python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/reports/jacoco/test/coverage.xml'
    - 'python /opt/source2filename.py build/reports/jacoco/test/coverage.xml'
  artifacts:
    reports:
      cobertura: "build/reports/jacoco/test/coverage.xml"
  interruptible: true

translate:
  stage: test
  script:
    - ./gradlew generatePot --stacktrace
  artifacts:
    paths:
    - build
  needs: ["assemble"]

compile against min JOSM:
  stage: test
  script:
    - ./gradlew compileJava_minJosm --stacktrace
  needs: ["assemble"]
  dependencies:
    - assemble
  interruptible: true

compile against latest JOSM:
  stage: test
  script:
    - ./gradlew compileJava_latestJosm --stacktrace
  needs: ["assemble"]
  dependencies:
    - assemble
  interruptible: true

build with java 11:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-11-josmplugin:latest
  script:
    - ./gradlew build --stacktrace
  needs: ["assemble with java 11"]
  dependencies:
    - assemble with java 11
  interruptible: true

build with java 15:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-15-josmplugin:latest
  script:
    - ./gradlew build --stacktrace
  needs: ["java 15 assemble"]
  allow_failure: true
  needs: ["assemble with java 15"]
  dependencies:
    - assemble with java 15
  interruptible: true

################
# Deploy stage #
################

transifex.com:
  image: registry.gitlab.com/josm/docker-library/python-transifex:latest
  stage: deploy
  environment:
    name: transifex.com
    url: https://www.transifex.com/josm/josm/josm-plugin_Mapillary/
  script:
    - TX_TOKEN="$TRANSIFEX_TOKEN" tx push -s --no-interactive
  needs: ["translate"]
  only:
    refs:
      - master
    variables:
      - $TRANSIFEX_TOKEN

codecov.io:
  image: alpine:3.10
  stage: deploy
  environment:
    name: codecov.io
    url: https://codecov.io/gh/JOSM/Mapillary
  before_script:
    - apk add --update curl bash
  script:
    - curl -s https://codecov.io/bash | bash
    - curl -s https://codecov.io/bash | bash /dev/stdin -c -F model_and_api
  needs: ["build"]
  only:
    refs:
      - master
    variables:
      - $CODECOV_TOKEN

sonarcloud.io:
  image: registry.gitlab.com/josm/docker-library/openjdk-11-josmplugin:latest
  stage: deploy
  environment:
    name: sonarcloud.io
    url: https://sonarcloud.io/dashboard?id=org.openstreetmap.josm.plugins%3AMapillary
  script:
    - git fetch --unshallow
    - ./gradlew -Dsonar.login=$SONAR_TOKEN sonarqube
  needs: ["test"]
  dependencies:
    - test
  only:
    refs:
      - master
    variables:
      - $SONAR_TOKEN

GitLab Maven repo:
  stage: deploy
  environment:
    name: GitLab.com / Maven packages
    url: https://gitlab.com/JOSM/plugin/Mapillary/-/packages
  script:
    - ./gradlew publishAllPublicationsToGitlabRepository
  needs: ["build", "compile against min JOSM", "compile against latest JOSM"]
  only:
    - tags@JOSM/plugin/Mapillary

release:
  stage: deploy
  environment:
    name: GitLab.com / pages branch
    url: https://gitlab.com/JOSM/plugin/Mapillary/tree/pages/dist
  script:
  - |
    base64 --decode "$SSH_PRIVATE_DEPLOY_KEY" > ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa
    git clone --depth 1 --branch pages git@gitlab.com:JOSM/plugin/Mapillary.git pages
  - |
    version=`git describe --always --dirty`
    longVersion=`git describe --always --long --dirty`
    commitMessage="Release version $longVersion"
  - |
    mkdir -pv "pages/dist/$version"
    cp -v build/dist/* build/tmp/jar/MANIFEST.MF "pages/dist/$version"
    rm -fv "pages/dist/latest"
    ln -s "./$version" "pages/dist/latest"
  - |
    cd pages/
    git config user.name "GitLab CI for JOSM/plugin/Mapillary"
    git config user.email "incoming+josm-plugin-mapillary-8564565-issue-@incoming.gitlab.com"
    git stage .
    git commit -a -m "$commitMessage"
    git push origin pages
  needs: ["build", "compile against min JOSM", "compile against latest JOSM"]
  only:
    - tags@JOSM/plugin/Mapillary


#################
# Release stage #
#################

release to Gitlab.com:
  stage: release
  environment:
    name: GitLab.com / Releases
    url: https://gitlab.com/JOSM/plugin/Mapillary/-/releases
  script:
    - ./gradlew releaseToGitlab
  needs: ["GitLab Maven repo"]
  only:
    - tags@JOSM/plugin/Mapillary
