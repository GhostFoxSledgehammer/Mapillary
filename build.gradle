plugins {
  id "org.sonarqube" version "2.5"
  id "org.kordamp.markdown.convert" version "1.1.0"
  id 'org.openstreetmap.josm.gradle.plugin' version '0.1.8'
  id "com.github.ben-manes.versions" version "0.17.0"
  id 'com.github.spotbugs' version '1.6.0'
  id "net.ltgt.errorprone" version "0.0.13" apply false
}

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'pmd'

apply from: 'gradle/version-functions.gradle'
apply from: 'gradle/tool-config.gradle'
apply from: 'gradle/markdown.gradle'

// Set up ErrorProne (currently only for JDK8, until JDK9 is supported)
if (JavaVersion.current().isJava8()) {
  apply plugin: 'net.ltgt.errorprone'
  dependencies.errorprone 'com.google.errorprone:error_prone_core:'+property('tool.errorprone.version')
  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xep:DefaultCharset:ERROR' << '-Xep:ClassCanBeStatic:ERROR'
  }
}

sourceCompatibility = '1.8'
version = getVersionName()
archivesBaseName = 'Mapillary'

repositories {
  jcenter()
}

dependencies {
  testImplementation ('org.openstreetmap.josm:josm-unittest'){changing=true}
  testImplementation 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ["$projectDir"]
      include 'data/**'
      include 'images/**'
      include 'LICENSE'
      include 'LICENSE_*'
    }
  }
  test {
    java {
      srcDirs = ['test/unit']
    }
    resources{
      srcDirs = ['test/data']
    }
  }
}

josm {
  debugPort = 7051
  manifest {
    oldVersionDownloadLink 12128, 'v1.5.5', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.5/Mapillary.jar')
    oldVersionDownloadLink 10824, 'v1.5.3', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.3/Mapillary.jar')
  }
}

eclipse {
  project {
    name = 'JOSM-Mapillary'
    comment = josm.manifest.description
    natures 'org.sonarlint.eclipse.core.sonarlintNature', 'ch.acanda.eclipse.pmd.builder.PMDNature', 'org.eclipse.buildship.core.gradleprojectnature'
    buildCommand 'org.sonarlint.eclipse.core.sonarlintBuilder'
    buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  }
}
eclipseClasspath.dependsOn cleanEclipseClasspath
eclipseProject.dependsOn cleanEclipseProject
tasks.eclipse.dependsOn = ['eclipseClasspath', 'eclipseProject']

tasks.withType(JavaCompile) {
  // Character encoding of Java files
  options.encoding = 'UTF-8'
}
tasks.withType(Javadoc) {
  failOnError false
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

import org.gradle.api.tasks.testing.logging.TestLogEvent

test {
  testLogging {
    exceptionFormat "full"
    events TestLogEvent.FAILED, TestLogEvent.SKIPPED
    showCauses true

    info {
      events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
      showStandardStreams true
    }
  }
}
