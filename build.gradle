import com.github.spotbugs.SpotBugsTask
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.openstreetmap.josm.plugins.mapillary.build.ConvertMarkdown
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id "org.sonarqube" version "2.6.2"
  id "org.openstreetmap.josm" version "0.5.0"
  id "com.github.ben-manes.versions" version "0.20.0"
  id "com.github.spotbugs" version "1.6.3"
  id "net.ltgt.errorprone" version "0.6"

  id 'eclipse'
  id 'jacoco'
  id 'java'
  id 'pmd'
}

// Set up ErrorProne
dependencies.errorprone("com.google.errorprone:error_prone_core:2.3.1")
tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-serial"
  options.errorprone {
    check("ClassCanBeStatic", CheckSeverity.ERROR)
    check("StringEquality", CheckSeverity.ERROR)
    check("WildcardImport", CheckSeverity.ERROR)
    check("MethodCanBeStatic", CheckSeverity.WARN)
    check("RemoveUnusedImports", CheckSeverity.WARN)
    check("PrivateConstructorForUtilityClass", CheckSeverity.WARN)
    check("LambdaFunctionalInterface", CheckSeverity.WARN)
    check("ConstantField", CheckSeverity.WARN)
  }
}

apply from: 'gradle/tool-config.gradle'

sourceCompatibility = '1.8'

archivesBaseName = 'Mapillary'

repositories {
  jcenter()
}

dependencies {
  if (!JavaVersion.current().isJava9Compatible()) {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
  }

  testImplementation ('org.openstreetmap.josm:josm-unittest:SNAPSHOT'){changing=true}
  testImplementation 'com.github.tomakehurst:wiremock:2.18.0'
  def junitVersion = "5.3.1"
  testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
  testImplementation("org.junit.vintage:junit-vintage-engine:$junitVersion")
  testImplementation("org.awaitility:awaitility:3.1.2")
  testImplementation("org.jmockit:jmockit:1.42")
}

sourceSets {
  test {
    java {
      srcDirs = ['test/unit']
    }
    resources{
      srcDirs = ['test/data']
    }
  }
}
tasks.processResources {
    from(project.projectDir) {
        include "LICENSE"
        include "LICENSE_*"
    }
}

task md2html(type: ConvertMarkdown) {
  srcDir = projectDir
  destDir = new File("$buildDir/md2html")
  setIncludes("README.md", "LICENSE.md")
  tasks.processResources.from(it)
}

josm {
  debugPort = 7051
  manifest {
    // See https://floscher.github.io/gradle-josm-plugin/kdoc/current/gradle-josm-plugin/org.openstreetmap.josm.gradle.plugin.config/-josm-manifest/old-version-download-link.html
    oldVersionDownloadLink(13733, "v1.5.15", new URL("https://github.com/JOSM/Mapillary/releases/download/v1.5.15/Mapillary.jar"))
    oldVersionDownloadLink 13643, 'v1.5.14', new URL("https://github.com/JOSM/Mapillary/releases/download/v1.5.14/Mapillary.jar")
    oldVersionDownloadLink 13558, 'v1.5.12+pre13643', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.12%2Bpre13643/Mapillary.jar')
    oldVersionDownloadLink 12987, 'v1.5.10', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.10/Mapillary.jar')
    oldVersionDownloadLink 12675, 'v1.5.7', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.7/Mapillary.jar')
    oldVersionDownloadLink 12128, 'v1.5.5', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.5/Mapillary.jar')
    oldVersionDownloadLink 10824, 'v1.5.3', new URL('https://github.com/JOSM/Mapillary/releases/download/v1.5.3/Mapillary.jar')
  }
  i18n {
    pathTransformer = getPathTransformer("github.com/JOSM/Mapillary/blob")
  }
}

eclipse {
  project {
    name = 'JOSM-Mapillary'
    comment = josm.manifest.description
    natures 'org.sonarlint.eclipse.core.sonarlintNature', 'ch.acanda.eclipse.pmd.builder.PMDNature', 'org.eclipse.buildship.core.gradleprojectnature'
    buildCommand 'org.sonarlint.eclipse.core.sonarlintBuilder'
    buildCommand 'ch.acanda.eclipse.pmd.builder.PMDBuilder'
    buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
  }
}
eclipseClasspath.dependsOn cleanEclipseClasspath
eclipseProject.dependsOn cleanEclipseProject
tasks.eclipse.dependsOn = ['eclipseClasspath', 'eclipseProject']

tasks.withType(JavaCompile) {
  // Character encoding of Java files
  options.encoding = 'UTF-8'
}
tasks.withType(Javadoc) {
  failOnError false
}
tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

test {
  project.afterEvaluate {
    // See https://jmockit.github.io/tutorial/Introduction.html#gradle
    jvmArgs "-javaagent:${classpath.find { it.name.contains("jmockit") }.absolutePath}"
  }
  testLogging {
    exceptionFormat "full"
    events TestLogEvent.FAILED, TestLogEvent.SKIPPED
    showCauses true

    info {
      events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
      showStandardStreams = true
    }
  }
}
